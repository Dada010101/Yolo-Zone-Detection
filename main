import torch
import cv2
import numpy as np
from ultralytics import YOLO


if torch.cuda.is_available():
    device = torch.device('cuda')
    print('Using device:', torch.cuda.get_device_name(torch.cuda.current_device()))
else:
    device = torch.device('cpu')
    print('Using device:', device)

video_path = "path-to-video"
cap = cv2.VideoCapture(video_path)
fps = cap.get(cv2.CAP_PROP_FPS)
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

# Define the video writer
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter('path to output', fourcc, fps, (width, height))

# Model
model = YOLO('yolo8n.pt')#or your model
classes = model.names
print(classes)
frame_count = 0
count_swimmers = 0
count_ppl_beach = 0


def draw_boxes(image, results):

    global count_swimmers
    global count_ppl_beach
    class_counts = {}

    count_swimmers = 0
    count_ppl_beach = 0

    for result in results[0].boxes.data.to("cpu"):
        x1, y1, x2, y2 = int(result[0]), int(result[1]), int(result[2]), int(result[3])
        conf = result[4]
        class_id = int(result[5])
        class_name = classes[class_id]

        if class_name in class_counts:
            class_counts[class_name] += 1
        else:
            class_counts[class_name] = 1

        if cv2.pointPolygonTest(swimmers, ((x1 + x2) // 2, (y1 + y2) // 2), False) >= 0:
            count_swimmers += 1
            print(count_swimmers)
            cv2.rectangle(image, (x1, y1), (x2, y2), (255, 0, 0), 2)
            label = f'{class_name} {conf:.2f}'
            (w, h), _ = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.5, 2)
            cv2.rectangle(image, (x1, y1 - h - 15), (x1 + w, y1), (255, 0, 0), -1)
            cv2.putText(image, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

        elif cv2.pointPolygonTest(pplRelaxing, ((x1 + x2) // 2, (y1 + y2) // 2), False) >= 0:
            count_ppl_beach += 1
            cv2.rectangle(image, (x1, y1), (x2, y2), (0, 0, 255), 2)
            label = f'{class_name} {conf:.2f}'
            (w, h), _ = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.5, 2)
            cv2.rectangle(image, (x1, y1 - h - 15), (x1 + w, y1), (0, 0, 255), -1)
            cv2.putText(image, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
            print(count_ppl_beach)


    # Text on frame
    cv2.putText(image, f'Swimmers: {count_swimmers}', (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 4)
    cv2.putText(image, f'People on beach: {count_ppl_beach}', (10, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 4)

    return image

while cap.isOpened():
    # Read a frame from the video
    interval = 100
    num_frames = total_frames // interval
    frame_index = 0
    ret, frame = cap.read()
    cap.set(cv2.CAP_PROP_POS_FRAMES, frame_index)

    if ret:

        frame_count += 1
        # draw polylines on frame
        swimmers = np.array([[446, 1076],[1654, 581], [1203, 495], [0, 560], [166, 1061]], np.int32)
        swimmers = swimmers.reshape((-1, 1, 2))

        pplRelaxing = np.array([[485, 1073], [1678, 574], [1971, 549], [1913, 1071]], np.int32)
        pplRelaxing = pplRelaxing.reshape((-1, 1, 2))

        # Visualize zone
        cv2.polylines(frame, [swimmers], True, (255, 255, 0), thickness=4)
        cv2.polylines(frame, [pplRelaxing], True, (0, 0, 255), thickness=4)

        results = model(frame)
        frame = draw_boxes(frame, results)
        cv2.imshow('', frame)
        out.write(frame)
        # Saving frames
        output_path = f"frame_{frame_index}.jpg"
        cv2.imwrite(output_path, frame)
        print(f"Frame {frame_index} saved successfully.")

        # Break the loop if 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord("q"):
            break
    else:
        # Break the loop if the end of the video is reached
        break

# Release the video capture object and close the display window
cap.release()
out.release()
cv2.destroyAllWindows()
